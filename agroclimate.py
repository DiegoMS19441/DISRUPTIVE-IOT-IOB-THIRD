# -*- coding: utf-8 -*-
"""Agroclimate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17fHqY-r4zEHnsYTnjKljRjCzDI2XVxkV

# Integrantes

RM551191 - Diego Mascarenhas Santos (2TDSPV)

RM550981 - Henrique Gerson Costa Correia (2TDSPV)

RM98482 - Sarah Oliveira Souza Rosa (2TDSPV)

RM97798 - Ester Dutra da Silva (2TDSPV)

RM99985 - Felipe Batista Gregório (2TDSPY)

# Descritvo

Nosso projeto é voltado para o campo da agricultura. Temos como objetivo desenvolver uma ferramenta que auxilie o agricultor a investir seus recursos em colheitas produtivas. A ferramenta agroclimate vai permitir que através de dados históricos o usuário consiga visualizar através de relatórios quais safras foram mais proveitosas considerando fatores climático, tipo de solo etc., dessa foram o agricultor poderá maximizar seus lucros, pois vai saber quais alimentos podem ser plantados em determinadas épocas do ano e não gastará insumos em plantações improdutivas.

# Imports
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

data = pd.read_csv("/content/Crop_recommendation.csv")
data

"""# Analisado propriedades do dataset"""

# Exibe as primeiras linhas do DataFrame
data.head()

# Mostra informações gerais do DataFrame (tipos, não nulos)
data.info()

# Soma o total de valores ausentes (NaN) em cada coluna
data.isna().sum()

# Exibe estatísticas descritivas das colunas numéricas
data.describe()

# Lista os nomes das colunas do DataFrame
data.columns

# Exibe os valores únicos da coluna 'label'
data['label'].unique()

# Retorna a dimensão do DataFrame (linhas, colunas)
data.shape

"""# Manipulando o dataset e gerando gráficos"""

sns.pairplot(data=data,hue='label')
plt.show()

numeric_data = data.drop(['label'],axis=1)
figure=plt.figure(figsize=(12,6))
sns.heatmap(numeric_data.corr(),annot=True,)

le = LabelEncoder()
data['label'] = le.fit_transform(data['label'])
data

class_labels = data['label'].unique().tolist()
class_labels = le.classes_
class_labels

label_dict = {}
for index,label in enumerate(class_labels):
    label_dict[label] = index

print(label_dict)

acc = []
model = []

x = data.drop('label',axis=1)
y = data['label']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,shuffle=True ,random_state=42)

scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_train=pd.DataFrame(x_train,columns=x.columns)
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,shuffle=True ,random_state=42)

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(x_train,y_train)
y_pred = rf_model.predict(x_test)
rf_model.score(x_train,y_train),rf_model.score(x_test,y_test)

accs = accuracy_score(y_pred, y_test)
acc.append(accs)
model.append('rf_model')
print("Matrix de Classificação:\n",confusion_matrix(y_test,y_pred))
print("Relatório de Classificação:\n",classification_report(y_test,y_pred))
print('.:. Random Forest Classifier:'+'\033[1m {:.3f}%'.format(accs*100)+' .:.')

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(x_train,y_train)
y_pred1 = dt_model.predict(x_test)
dt_model.score(x_train,y_train),dt_model.score(x_test,y_test)

accs1 = accuracy_score(y_pred1, y_test)
acc.append(accs1)
model.append('dt_model')
print("Matrix de Confusão:\n",confusion_matrix(y_test,y_pred1))
print("Relatório de Classificação:\n",classification_report(y_test,y_pred1))
print('.:. Classificador de decision tree:'+'\033[1m {:.3f}%'.format(accs*100)+' .:.')

knn_model = KNeighborsClassifier()
knn_model.fit(x_train,y_train)
y_pred2 = knn_model.predict(x_test)
knn_model.score(x_train,y_train),knn_model.score(x_test,y_test)

accs2 = accuracy_score(y_pred2, y_test)
acc.append(accs2)
model.append('knn_model')
print("Matrix de confusão:\n",confusion_matrix(y_test,y_pred2))
print("Relatório de Classificação:\n",classification_report(y_test,y_pred2))
print('.:.Classificador K Neighbors :'+'\033[1m {:.3f}%'.format(accs2*100)+' .:.')

plt.figure(figsize=[10,5],dpi = 100)
plt.title('Accuracy Comparison')
plt.xlabel('Accuracy')
plt.ylabel('Algorithm')
sns.barplot(x = acc,y = model,palette='dark')

features = np.array([[104,18, 30, 23.603016, 60.3, 6.7, 140.91]])
Recommended_Crop = rf_model.predict(features)
print("Recomendo colher:",class_labels[Recommended_Crop])